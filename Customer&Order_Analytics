In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 


--How many orders were placed in January?

SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

--How many of those orders were for an iPhone?

SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE Product = "iPhone"
AND length(orderid) = 6 
AND orderid <> 'Order ID';

--Select the customer account numbers for all the orders that were placed in February.

SELECT DISTINCT acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales feb
ON cust.order_id = feb.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

--Which product was the cheapest one sold in January, and what was the price?

SELECT Product, MIN(price)
FROM BIT_DB.JanSales
GROUP BY Product, price
ORDER BY price ASC LIMIT 1;
--or
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE  price IN (SELECT min(price) FROM BIT_DB.JanSales);

--What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).

SELECT SUM(Quantity)*price AS revenue, Product
FROM BIT_DB.JanSales
GROUP BY Product;

--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT Product, location, Quantity, SUM(Quantity)*price AS revenue
FROM BIT_DB.FebSales
WHERE location = "548 Lincoln St, Seattle, WA 98101"
GROUP BY product;

--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT COUNT(DISTINCT cust.acctnum), AVG(price*Quantity)
FROM BIT_DB.customers AS cust
LEFT JOIN BIT_DB.FebSales AS feb
ON cust.order_id = feb.orderid
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
AND feb.Quantity > 2;

-------------------
--The order dates and times between the specified times

SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate BETWEEN '02/13/19 00:00' AND '02/18/19 00:00';

--The location of the order that matches the specified date and time

SELECT location
FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';

--Any product sold in Feb that has the name batteries in it

SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%';

--The list of products that sold in February that has a price ending in .99. 

SELECT distinct Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99';

--Listing all the products sold in Los Angeles in February, and including how many of each were sold.

SELECT Product, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product;

----Which locations in New York received at least 3 orders in January, 
--and how many orders did they each receive? 

SELECT DISTINCT location, COUNT(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING COUNT(orderID) > 2;

--How many of each type of headphone were sold in February?

SELECT sum(Quantity) as quantity_sold,
Product
FROM BIT_DB.FebSales 
WHERE Product like '%Headphones%'
GROUP BY Product;

--What was the average amount spent per account in February?

SELECT SUM(feb.Quantity*feb.price)/COUNT(cust.acctnum)
FROM BIT_DB.FebSales AS feb
JOIN BIT_DB.customers AS cust
ON cust.order_id = feb.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';
--or
SELECT AVG(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

--What was the average quantity of products purchased per account in February? 

SELECT SUM(Quantity)/COUNT(cust.acctnum)
FROM BIT_DB.FebSales AS feb
JOIN BIT_DB.customers AS cust
ON feb.orderID = cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

--Which product brought in the most revenue in January and how much revenue did it bring in total?

SELECT product, SUM(quantity*price)
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY sum(quantity*price) desc 
LIMIT 1;
